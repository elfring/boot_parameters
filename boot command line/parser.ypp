/*
 * This is a specification for the parsing of input.
 * Copyright 2013  Markus Elfring
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public Licence (version 3)
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public Licence for more details.
 *
 * You should have received a copy of the GNU General Public Licence along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/* %require "3.0-dirty" */
%skeleton "lalr1.cc"

%defines

%define parser_class_name {my_parser}
%define api.token.prefix {TOK_}
%define api.token.constructor
%define api.value.type variant
%define parse.assert
%define parse.trace
%define parse.error verbose

%code requires
{
#include <string>

namespace parameters
{
   class extractor;
}
}

/* The parsing context */
%param { parameters::extractor& driver }

%locations
%initial-action
{
 @$.begin.filename = @$.end.filename = &driver.file;
};

%code
{
#include <config.h>
#include <parameter_extractor.h>
#include <sstream>

/* Conversion */
template <typename T>
inline
std::string
string_cast(T const& t)
{
 std::ostringstream o;
 o << t;
 return o.str();
}

void yyerror(char const* s);

static char const WRONG_ASSIGNMENT[] = "An assignment was tried without the specification of the main key.";
}

%left <char> DOT "."
%left <char> ASSIGN "="
%token END 0 "end of file"
%token <std::string> IDENTIFIER "identifier"
%token <std::string> SEPARATION "delimiter"

%type <std::string> value value_continuation value_end
%type <char> allow_also_in_value

%printer { yyoutput << $$; } <*>;

%%
%start assignments;

allow_also_in_value: DOT
                    | ASSIGN
;

value_end: "identifier"
           | allow_also_in_value { $$ = $1; }
;

value_continuation: /* empty */ {}
                    | value_continuation allow_also_in_value { ($$ += $1) += $2; }
                    | value_continuation "identifier" allow_also_in_value { (($$ += $1) += $2) += $3; }
;

value: value_continuation value_end { ($$ += $1) += $2; }
;

non_empty_assignment: "identifier" ASSIGN value { driver.parameters[$1] = $3; }
            | "identifier" DOT "identifier" ASSIGN value {
              driver.parameters[($1 += '.') += $3] = $5;
              }
            | "identifier" DOT ASSIGN value { driver.parameters[$1] = $4; }
;

assignment_without_file_end: non_empty_assignment
            | "identifier" { driver.parameters[$1] = ""; }
            | "identifier" DOT ASSIGN { driver.parameters[$1] = ""; }
            | "identifier" DOT "identifier" { driver.parameters[($1 += '.') += $3] = ""; }
            | DOT "identifier" ASSIGN value { yyerror(WRONG_ASSIGNMENT); YYERROR; }
;

assignment_at_file_end: non_empty_assignment END
            | "identifier" ASSIGN END { driver.parameters[$1] = ""; }
            | "identifier" DOT ASSIGN END { driver.parameters[$1] = ""; }
            | "identifier" DOT "identifier" END { driver.parameters[($1 += '.') += $3] = ""; }
            | "identifier" DOT "identifier" ASSIGN END { driver.parameters[($1 += '.') += $3] = ""; }
            | DOT "identifier" ASSIGN END { yyerror(WRONG_ASSIGNMENT); YYERROR; }
;

assignment_with_leading_delimiter: "delimiter" assignment_without_file_end
/*            | error { yyerrok; } */
;

assignment_selection3: /* empty */
             | assignment_selection3 assignment_with_leading_delimiter
;

assignment_selection2: assignment_at_file_end
             | assignment_selection3 "delimiter" assignment_at_file_end
;

assignments: assignment_with_leading_delimiter assignment_selection2
             | assignment_with_leading_delimiter "delimiter" END
             | assignment_without_file_end assignment_selection3 "delimiter" END
             | "delimiter" END
             | /* empty */ END
             | assignment_at_file_end
;
%%

#include <cstdio>

void yyerror(char const* s)
{
 int x = std::fflush(stdout);

 if (x)
 {
    std::perror("fflush");
 }

 x = std::fprintf(stderr, "%s: %s\n", "yyerror", s);

 if (x < 9)
 {
    std::perror("fprintf");
 }
}

void
yy::my_parser::error(location_type const& l, std::string const& m)
{
 driver.error(l, m);
}
